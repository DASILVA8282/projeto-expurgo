import { motion } from "framer-motion";
import { Target, Crosshair, Shield, Brain, Zap, Map, Eye, Users, Languages, Timer, Wind, ArrowRight, Shuffle, MessageSquare, Star, PartyPopper, Heart, Move, EyeOff, PlayCircle, Search, Dice6 } from "lucide-react";
import { Button } from "./button";
import { useState } from "react";

interface ClassSkillsSystemProps {
  skills: {
    chute: number;
    precisao: number;
    roubo: number;
    analise: number;
    determinacao: number;
    estrategia: number;
    intuicao: number;
    interacao_social: number;
    lingua_estrangeira: number;
    corrida: number;
    cruzamento: number;
    defesa: number;
    drible: number;
    passe: number;
    performance: number;
    comemoracao: number;
    fortitude: number;
    finta: number;
    furtividade: number;
    iniciativa: number;
    percepcao: number;
    sorte: number;
    dominio: number;
    cabeceio: number;
    interceptacao: number;
    reacao: number;
  };
  onSkillChange: (skill: string, value: number) => void;
  isCreatingCharacter: boolean;
}

// Defini√ß√£o das Classes I-X com dados e b√¥nus
const skillClasses = [
  { level: 0, name: "SEM CLASSE", dice: "‚Äî", bonus: "‚Äî", description: "N√£o possui treinamento nesta per√≠cia" },
  { level: 1, name: "CLASSE I", dice: "1d20", bonus: "+2", description: "Treinamento b√°sico nessa √°rea, o necess√°rio para usar a fun√ß√£o." },
  { level: 2, name: "CLASSE II", dice: "1d20", bonus: "+4", description: "T√©cnica ainda b√°sica, por√©m com um pouco de treino aplicado." },
  { level: 3, name: "CLASSE III", dice: "2d20", bonus: "+6", description: "Ainda √© iniciante, por√©m quase se torna intermedi√°rio, com habilidades altas na per√≠cia." },
  { level: 4, name: "CLASSE IV", dice: "2d20", bonus: "+8", description: "Nesse n√≠vel, voc√™ j√° pode ser chamado de habilidoso." },
  { level: 5, name: "CLASSE V", dice: "3d20", bonus: "+10", description: "Talento e habilidade reconhec√≠veis. √â realmente bom no que faz." },
  { level: 6, name: "CLASSE VI", dice: "3d20", bonus: "+12", description: "Essa habilidade se torna quase sua assinatura, sendo um dos seus grandes trunfos." },
  { level: 7, name: "CLASSE VII", dice: "4d20", bonus: "+14", description: "Voc√™ tem facilidade em executar movimentos avan√ßados, realmente habilidoso." },
  { level: 8, name: "CLASSE VIII", dice: "4d20", bonus: "+16", description: "Voc√™ √© um prod√≠gio dessa √°rea, n√≠veis extremos de habilidade." },
  { level: 9, name: "CLASSE IX", dice: "5d20", bonus: "+18", description: "Talento absoluto, destaque total, talvez inalcan√ß√°vel." },
  { level: 10, name: "CLASSE X", dice: "5d20", bonus: "+20", description: "Voc√™ atingiu o imposs√≠vel nessa √°rea. Talento sobre-humano." }
];

export function ClassSkillsSystem({ skills, onSkillChange, isCreatingCharacter }: ClassSkillsSystemProps) {
  const [selectedSkills, setSelectedSkills] = useState<string[]>([]);

  const allSkills = [
    // Per√≠cias Principais (Vermelhas)
    { name: "chute", displayName: "CHUTE", description: "Finaliza√ß√£o de gol", details: "Chute: teste contra DP; goleiro reage com Defesa", icon: Target, emoji: "ü•Ö", category: "principal", attributes: "(F√çS, VEL, EGO)" },
    { name: "precisao", displayName: "PRECIS√ÉO", description: "Chutes certeiros de longa dist√¢ncia", details: "Chute Distante: al√©m do alcance, paga 4 FOL + penalidades", icon: Crosshair, emoji: "üéØ", category: "principal", attributes: "(VEL)" },
    { name: "roubo", displayName: "ROUBO", description: "Desarme e intercepta√ß√£o de bola", details: "Roubo: teste vs Dom√≠nio. Rea√ß√£o contra passes pr√≥ximos", icon: Shield, emoji: "üè¥‚Äç‚ò†Ô∏è", category: "principal", attributes: "(F√çS, VEL, EGO)" },
    { name: "analise", displayName: "AN√ÅLISE", description: "Copiar a√ß√µes e estudar campo", details: "Copiar movimentos dos advers√°rios e ler o jogo", icon: Brain, emoji: "üß†", category: "principal", attributes: "(INT)" },
    { name: "determinacao", displayName: "DETERMINA√á√ÉO", description: "Resist√™ncia mental", details: "Anula√ß√£o de condi√ß√µes mentais e resist√™ncia psicol√≥gica", icon: Zap, emoji: "üí™", category: "principal", attributes: "(EGO)" },
    { name: "estrategia", displayName: "ESTRAT√âGIA", description: "T√°tica e lideran√ßa de equipe", details: "Comandar estrat√©gias e liderar o time em campo", icon: Map, emoji: "üó∫Ô∏è", category: "principal", attributes: "(INT)" },
    { name: "intuicao", displayName: "INTUI√á√ÉO", description: "Instintos e solu√ß√µes espont√¢neas", details: "Rea√ß√µes instintivas e solu√ß√µes criativas", icon: Eye, emoji: "üåü", category: "principal", attributes: "(INT, EGO)" },
    { name: "interacao_social", displayName: "INTERA√á√ÉO SOCIAL", description: "Comunica√ß√£o e carisma", details: "Influenciar pessoas e se comunicar efetivamente", icon: Users, emoji: "üó£Ô∏è", category: "principal", attributes: "(CAR)" },
    { name: "lingua_estrangeira", displayName: "L√çNGUA ESTRANGEIRA", description: "Idiomas com b√¥nus espec√≠ficos", details: "Comunica√ß√£o em idiomas estrangeiros", icon: Languages, emoji: "üó£Ô∏è", category: "principal", attributes: "(INT)" },
    { name: "corrida", displayName: "CORRIDA", description: "Acelera√ß√£o, explos√£o, persegui√ß√£o", details: "Velocidade de deslocamento e corridas", icon: Timer, emoji: "üèÉ", category: "principal", attributes: "(F√çS, VEL)" },
    { name: "cruzamento", displayName: "CRUZAMENTO", description: "Passe longo das laterais", details: "Passes longos e cruzamentos das laterais", icon: Wind, emoji: "‚û∞", category: "principal", attributes: "(VEL)" },
    { name: "defesa", displayName: "DEFESA", description: "Agarrar ou defender chutes", details: "Defesa de goleiros e zagueiros", icon: Shield, emoji: "üõ°Ô∏è", category: "principal", attributes: "(F√çS, VEL, INT)" },
    { name: "drible", displayName: "DRIBLE", description: "Enganar advers√°rios com a bola", details: "Fintas e dribles para passar pelos oponentes", icon: Shuffle, emoji: "üåÄ", category: "principal", attributes: "(VEL, EGO)" },
    { name: "passe", displayName: "PASSE", description: "Passes simples, rea√ß√µes e alcance", details: "Passes b√°sicos e distribui√ß√£o de jogo", icon: ArrowRight, emoji: "üéØ", category: "principal", attributes: "(VEL, INT)" },
    { name: "performance", displayName: "PERFORMANCE", description: "Expressividade e fama", details: "Carisma em campo e performance para p√∫blico", icon: Star, emoji: "üé≠", category: "principal", attributes: "(CAR)" },
    { name: "comemoracao", displayName: "COMEMORA√á√ÉO", description: "Intera√ß√£o p√≥s-gol", details: "Comemora√ß√µes √©picas ap√≥s marcar gols", icon: PartyPopper, emoji: "üéâ", category: "principal", attributes: "(CAR)" },

    // Per√≠cias Livres (√Çmbar)
    { name: "fortitude", displayName: "FORTITUDE", description: "Resist√™ncia f√≠sica", details: "Resist√™ncia a dano f√≠sico e cansa√ßo", icon: Heart, emoji: "üí•", category: "livre", attributes: "(F√çS)" },
    { name: "finta", displayName: "FINTA", description: "Engana√ß√£o", details: "Fintas e movimentos para enganar", icon: Move, emoji: "üí•", category: "livre", attributes: "(INT, VEL)" },
    { name: "furtividade", displayName: "FURTIVIDADE", description: "Se esconder", details: "Movimenta√ß√£o discreta e posicionamento", icon: EyeOff, emoji: "üí•", category: "livre", attributes: "(VEL)" },
    { name: "iniciativa", displayName: "INICIATIVA", description: "Atitude", details: "Rapidez de rea√ß√£o e tomada de decis√£o", icon: PlayCircle, emoji: "üí•", category: "livre", attributes: "(VEL)" },
    { name: "percepcao", displayName: "PERCEP√á√ÉO", description: "Perceber", details: "Consci√™ncia do campo e percep√ß√£o espacial", icon: Search, emoji: "üí•", category: "livre", attributes: "(INT, VEL)" },
    { name: "sorte", displayName: "SORTE", description: "Disputa de sorte", details: "Fatores aleat√≥rios e coincid√™ncias", icon: Dice6, emoji: "üí•", category: "livre", attributes: "" },

    // Per√≠cias de Rea√ß√£o (Verdes)
    { name: "dominio", displayName: "DOM√çNIO", description: "Receber passe", details: "Controle de bola ao receber passes", icon: Target, emoji: "üéØ", category: "reacao", attributes: "(F√çS, VEL, EGO)" },
    { name: "cabeceio", displayName: "CABECEIO", description: "Jogo de cabe√ßa", details: "Cabeceadas para gol ou passes", icon: Brain, emoji: "üß¨", category: "reacao", attributes: "(F√çS, VEL)" },
    { name: "interceptacao", displayName: "INTERCEPTA√á√ÉO", description: "Interceptar", details: "Intercepta√ß√£o de passes e cruzamentos", icon: Shield, emoji: "üõë", category: "reacao", attributes: "(VEL, EGO)" },
    { name: "reacao", displayName: "REA√á√ÉO", description: "Rea√ß√£o fora do turno", details: "Rea√ß√µes r√°pidas a situa√ß√µes imprevistas", icon: Zap, emoji: "‚è±Ô∏è", category: "reacao", attributes: "" },
  ];

  const getCategoryInfo = (category: string) => {
    switch (category) {
      case "principal":
        return { color: "text-red-400", bgColor: "bg-red-800/20", borderColor: "border-red-700/30", title: "PER√çCIAS PRINCIPAIS" };
      case "livre":
        return { color: "text-amber-400", bgColor: "bg-amber-800/20", borderColor: "border-amber-700/30", title: "PER√çCIAS LIVRES" };
      case "reacao":
        return { color: "text-green-400", bgColor: "bg-green-800/20", borderColor: "border-green-700/30", title: "PER√çCIAS DE REA√á√ÉO" };
      default:
        return { color: "text-gray-400", bgColor: "bg-gray-800/20", borderColor: "border-gray-700/30", title: "OUTRAS" };
    }
  };

  const handleSkillToggle = (skillName: string) => {
    if (!isCreatingCharacter) return;

    const currentSkillValue = skills[skillName as keyof typeof skills];
    const newSelectedSkills = [...selectedSkills];

    if (currentSkillValue === 0) {
      // Adicionar per√≠cia se tiver menos de 8 selecionadas
      if (selectedSkills.length < 8) {
        newSelectedSkills.push(skillName);
        setSelectedSkills(newSelectedSkills);
        onSkillChange(skillName, 1); // Classe I
      }
    } else {
      // Remover per√≠cia
      const index = newSelectedSkills.indexOf(skillName);
      if (index > -1) {
        newSelectedSkills.splice(index, 1);
        setSelectedSkills(newSelectedSkills);
        onSkillChange(skillName, 0); // Sem classe
      }
    }
  };

  const handleSkillIncrease = (skillName: string) => {
    if (isCreatingCharacter) return; // Durante cria√ß√£o s√≥ pode escolher as 8 iniciais

    const currentValue = skills[skillName as keyof typeof skills];
    if (currentValue < 10) {
      onSkillChange(skillName, currentValue + 1);
    }
  };

  const handleSkillDecrease = (skillName: string) => {
    if (isCreatingCharacter) return; // Durante cria√ß√£o s√≥ pode escolher as 8 iniciais

    const currentValue = skills[skillName as keyof typeof skills];
    if (currentValue > 0) {
      onSkillChange(skillName, currentValue - 1);
    }
  };

  const getSkillClass = (value: number) => {
    return skillClasses[value] || skillClasses[0];
  };

  const selectedCount = Object.values(skills).filter(value => value > 0).length;

  const groupedSkills = allSkills.reduce((acc, skill) => {
    if (!acc[skill.category]) acc[skill.category] = [];
    acc[skill.category].push(skill);
    return acc;
  }, {} as Record<string, typeof allSkills>);

  return (
    <div className="space-y-8">
      {/* Instru√ß√£o para cria√ß√£o de personagem */}
      {isCreatingCharacter && (
        <div className="text-center p-4 bg-red-900/30 border border-red-700 rounded-lg">
          <h3 className="font-bebas text-xl text-red-400 mb-2">ESCOLHA 8 PER√çCIAS INICIAIS</h3>
          <p className="text-gray-300 font-oswald">
            Selecione 8 per√≠cias que come√ßar√£o no n√≠vel <span className="text-red-400 font-bold">CLASSE I</span>.<br/>
            <span className="text-amber-400">Per√≠cias selecionadas: {selectedCount}/8</span>
          </p>
        </div>
      )}

      {/* Sistema de Classes - Refer√™ncia */}
      <div className="bg-gray-900/50 border border-gray-700 rounded-lg p-4">
        <h3 className="font-bebas text-lg text-red-400 mb-4 text-center">SISTEMA DE CLASSES</h3>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-2 text-sm">
          {skillClasses.slice(1).map((skillClass) => (
            <div key={skillClass.level} className="text-center">
              <div className="font-bebas text-red-400">{skillClass.name}</div>
              <div className="text-gray-300">{skillClass.dice}{skillClass.bonus}</div>
            </div>
          ))}
        </div>
      </div>

      {/* Per√≠cias por categoria */}
      {Object.entries(groupedSkills).map(([category, categorySkills]) => {
        const categoryInfo = getCategoryInfo(category);
        
        return (
          <div key={category} className="space-y-4">
            <div className="text-center">
              <h3 className={`font-bebas text-xl ${categoryInfo.color} tracking-wide`}>
                {categoryInfo.title}
              </h3>
            </div>

            <div className="grid gap-4">
              {categorySkills.map((skill) => {
                const IconComponent = skill.icon;
                const currentValue = skills[skill.name as keyof typeof skills];
                const skillClass = getSkillClass(currentValue);
                const isSelected = currentValue > 0;

                return (
                  <motion.div
                    key={skill.name}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    className={`${categoryInfo.bgColor} ${categoryInfo.borderColor} border rounded-lg p-4 ${
                      isCreatingCharacter ? (isSelected ? 'ring-2 ring-red-500' : 'cursor-pointer hover:bg-gray-800/50') : ''
                    }`}
                    onClick={() => isCreatingCharacter && handleSkillToggle(skill.name)}
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center gap-3">
                        <div className="flex items-center gap-2">
                          <span className="text-2xl">{skill.emoji}</span>
                          <IconComponent className={`w-5 h-5 ${categoryInfo.color}`} />
                        </div>
                        <div>
                          <h4 className={`font-bebas text-lg ${categoryInfo.color} tracking-wide`}>
                            {skill.displayName}
                          </h4>
                          <p className="text-gray-300 font-oswald text-sm">
                            {skill.description} <span className="text-gray-400">{skill.attributes}</span>
                          </p>
                          <p className="text-gray-400 font-oswald text-xs">
                            {skill.details}
                          </p>
                        </div>
                      </div>

                      {/* Controles de n√≠vel (apenas para personagens existentes) */}
                      {!isCreatingCharacter && (
                        <div className="flex items-center gap-3">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleSkillDecrease(skill.name);
                            }}
                            disabled={currentValue <= 0}
                            className="h-8 w-8 p-0 hover:bg-red-700/30 disabled:opacity-30"
                          >
                            -
                          </Button>

                          <div className="text-center min-w-[120px]">
                            <div className={`font-bebas text-sm ${categoryInfo.color}`}>
                              {skillClass.name}
                            </div>
                            <div className="text-gray-300 text-xs">
                              {skillClass.dice}{skillClass.bonus}
                            </div>
                          </div>

                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleSkillIncrease(skill.name);
                            }}
                            disabled={currentValue >= 10}
                            className="h-8 w-8 p-0 hover:bg-red-700/30 disabled:opacity-30"
                          >
                            +
                          </Button>
                        </div>
                      )}

                      {/* Estado da per√≠cia durante cria√ß√£o */}
                      {isCreatingCharacter && (
                        <div className="text-center min-w-[120px]">
                          <div className={`font-bebas text-sm ${isSelected ? 'text-red-400' : 'text-gray-500'}`}>
                            {isSelected ? 'CLASSE I' : 'N√ÉO SELECIONADA'}
                          </div>
                          <div className={`text-xs ${isSelected ? 'text-gray-300' : 'text-gray-600'}`}>
                            {isSelected ? '1d20+2' : '‚Äî'}
                          </div>
                        </div>
                      )}
                    </div>

                    {/* Descri√ß√£o da classe atual */}
                    {currentValue > 0 && (
                      <div className="mt-3 pt-3 border-t border-gray-700">
                        <p className="text-gray-400 font-oswald text-xs italic">
                          {skillClass.description}
                        </p>
                      </div>
                    )}
                  </motion.div>
                );
              })}
            </div>
          </div>
        );
      })}
    </div>
  );
}